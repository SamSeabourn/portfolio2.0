{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TitlePanel","React","lazy","HeroPanel","ProjectPanel","TopButtons","Footer","ContactForm","Flanders","App","useState","nightMode","setNightMode","loadingMessage","fallback","role","alt","className","style","themeMetaTag","document","getElementById","setAttribute","background","transition","setColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5512b2bf.chunk.js","sourcesContent":["import React, { useState, Suspense } from 'react';\nimport './App.css';\n\nconst TitlePanel = React.lazy(() => import('./components/TitlePanel'));\nconst HeroPanel = React.lazy(() => import('./components/HeroPanel'));\nconst ProjectPanel = React.lazy(() => import('./components/ProjectPanel'));\nconst TopButtons = React.lazy(() => import('./components/TopButtons'));\nconst Footer = React.lazy(() => import('./components/Footer'));\nconst ContactForm = React.lazy(() => import('./components/ContactForm'));\nconst Flanders = React.lazy(() => import('./components/Flanders'));\n\nfunction App() {\n  const [nightMode, setNightMode] = useState(false);\n\n  const setColor = (nightMode) => {\n    var themeMetaTag = document.getElementById('themeColor');\n    if (nightMode) {\n      themeMetaTag.setAttribute(\"content\", \"rgb(28, 33, 48)\");\n      return { \n        background: \"rgb(28, 33, 48)\",\n        transition: \"0.5s ease-in\"\n      };\n    } else {\n      themeMetaTag.setAttribute(\"content\", \"rgb(255, 255, 255)\");\n      return { \n        background: \"rgb(255, 255, 255)\", \n        transition: \"0.5s ease-in\"\n      };\n    };\n  };\n  \n  const loadingMessage = <div> Loading... </div> \n  return (\n    <Suspense fallback={ <div> Spooling up... <span role=\"image\" alt=\"laptop\">ðŸ’» </span> </div> }>\n    <div className=\"App\" style={ setColor( nightMode) }>\n        <div className=\"content\">\n          <Suspense fallback={ loadingMessage }>\n            <TopButtons nightMode={ nightMode } setNightMode={ setNightMode }/>\n          </Suspense>\n          <Suspense fallback={ loadingMessage }>\n            <TitlePanel nightMode={ nightMode }/>\n          </Suspense>\n          <Suspense fallback={ loadingMessage }>\n            <HeroPanel nightMode={ nightMode }/>\n          </Suspense>\n          <Suspense fallback={ loadingMessage }>\n            <ProjectPanel nightMode={ nightMode }/>\n          </Suspense>\n          <Suspense fallback={ loadingMessage }>\n            <ContactForm nightMode={ nightMode }/>\n          </Suspense>\n          <Suspense fallback={ loadingMessage }>\n            <Footer nightMode={ nightMode }/>\n          </Suspense>\n          <Flanders />\n        </div>\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Waiting on react-slick update\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <App />,\ndocument.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}