{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TitlePanel","React","lazy","HeroPanel","ProjectPanel","TopButtons","Footer","ContactForm","Flanders","App","useState","nightMode","setNightMode","loadingMessage","fallback","role","alt","className","style","themeMetaTag","document","getElementById","setAttribute","background","transition","setColor","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4PAGMA,G,MAAaC,IAAMC,MAAK,kBAAM,iCAC9BC,EAAYF,IAAMC,MAAK,kBAAM,sDAC7BE,EAAeH,IAAMC,MAAK,kBAAM,sDAChCG,EAAaJ,IAAMC,MAAK,kBAAM,gCAC9BI,EAASL,IAAMC,MAAK,kBAAM,gCAC1BK,EAAcN,IAAMC,MAAK,kBAAM,gCAC/BM,EAAWP,IAAMC,MAAK,kBAAM,iCAoDnBO,MAlDf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAoBPC,EAAiB,6CACvB,OACE,kBAAC,WAAD,CAAUC,SAAW,gDAAqB,0BAAMC,KAAK,QAAQC,IAAI,UAAvB,iBAArB,MACrB,yBAAKC,UAAU,MAAMC,MApBN,SAACP,GAChB,IAAIQ,EAAeC,SAASC,eAAe,cAC3C,OAAIV,GACFQ,EAAaG,aAAa,UAAW,mBAC9B,CACLC,WAAY,kBACZC,WAAY,kBAGdL,EAAaG,aAAa,UAAW,sBAC9B,CACLC,WAAY,qBACZC,WAAY,iBAQaC,CAAUd,IACnC,yBAAKM,UAAU,WACb,kBAAC,WAAD,CAAUH,SAAWD,GACnB,kBAACR,EAAD,CAAYM,UAAYA,EAAYC,aAAeA,KAErD,kBAAC,WAAD,CAAUE,SAAWD,GACnB,kBAACb,EAAD,CAAYW,UAAYA,KAE1B,kBAAC,WAAD,CAAUG,SAAWD,GACnB,kBAACV,EAAD,CAAWQ,UAAYA,KAEzB,kBAAC,WAAD,CAAUG,SAAWD,GACnB,kBAACT,EAAD,CAAcO,UAAYA,KAE5B,kBAAC,WAAD,CAAUG,SAAWD,GACnB,kBAACN,EAAD,CAAaI,UAAYA,KAE3B,kBAAC,WAAD,CAAUG,SAAWD,GACnB,kBAACP,EAAD,CAAQK,UAAYA,KAEtB,kBAACH,EAAD,UC1CJkB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MClFjEC,IAASC,OACP,kBAAC,EAAD,MACFjC,SAASC,eAAe,SDMjB,SAAkBa,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,GAAwB3B,OAAOC,SAAS2B,MACpDC,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,QAAQ,WAC9B,IAAMzB,EAAK,UAAMsB,GAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCyB,MAAM1B,EAAO,CACX2B,QAAS,CAAE,iBAAkB,YAE5BtB,MAAK,SAAAuB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAM5B,MAAK,SAAAC,GACjCA,EAAa4B,aAAa7B,MAAK,WAC7BV,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAM5B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OC/B/BE,K","file":"static/js/main.8117798a.chunk.js","sourcesContent":["import React, { useState, Suspense } from 'react';\r\nimport './App.css';\r\n\r\nconst TitlePanel = React.lazy(() => import('./components/TitlePanel'));\r\nconst HeroPanel = React.lazy(() => import('./components/HeroPanel'));\r\nconst ProjectPanel = React.lazy(() => import('./components/ProjectPanel'));\r\nconst TopButtons = React.lazy(() => import('./components/TopButtons'));\r\nconst Footer = React.lazy(() => import('./components/Footer'));\r\nconst ContactForm = React.lazy(() => import('./components/ContactForm'));\r\nconst Flanders = React.lazy(() => import('./components/Flanders'));\r\n\r\nfunction App() {\r\n  const [nightMode, setNightMode] = useState(false);\r\n\r\n  const setColor = (nightMode) => {\r\n    var themeMetaTag = document.getElementById('themeColor');\r\n    if (nightMode) {\r\n      themeMetaTag.setAttribute(\"content\", \"rgb(28, 33, 48)\");\r\n      return { \r\n        background: \"rgb(28, 33, 48)\",\r\n        transition: \"0.5s ease-in\"\r\n      };\r\n    } else {\r\n      themeMetaTag.setAttribute(\"content\", \"rgb(255, 255, 255)\");\r\n      return { \r\n        background: \"rgb(255, 255, 255)\", \r\n        transition: \"0.5s ease-in\"\r\n      };\r\n    };\r\n  };\r\n  \r\n  const loadingMessage = <div> Loading... </div> \r\n  return (\r\n    <Suspense fallback={ <div> Spooling up... <span role=\"image\" alt=\"laptop\">ðŸ’» </span> </div> }>\r\n    <div className=\"App\" style={ setColor( nightMode) }>\r\n        <div className=\"content\">\r\n          <Suspense fallback={ loadingMessage }>\r\n            <TopButtons nightMode={ nightMode } setNightMode={ setNightMode }/>\r\n          </Suspense>\r\n          <Suspense fallback={ loadingMessage }>\r\n            <TitlePanel nightMode={ nightMode }/>\r\n          </Suspense>\r\n          <Suspense fallback={ loadingMessage }>\r\n            <HeroPanel nightMode={ nightMode }/>\r\n          </Suspense>\r\n          <Suspense fallback={ loadingMessage }>\r\n            <ProjectPanel nightMode={ nightMode }/>\r\n          </Suspense>\r\n          <Suspense fallback={ loadingMessage }>\r\n            <ContactForm nightMode={ nightMode }/>\r\n          </Suspense>\r\n          <Suspense fallback={ loadingMessage }>\r\n            <Footer nightMode={ nightMode }/>\r\n          </Suspense>\r\n          <Flanders />\r\n        </div>\r\n      </div>\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Waiting on react-slick update\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root')\r\n// );\r\n\r\nReactDOM.render(\r\n  <App />,\r\ndocument.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}